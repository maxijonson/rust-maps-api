// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from "./client";
import { client } from "./client.gen";
import type {
  RustMapsApiFeaturesPublicApiCustomMapsCreateData,
  RustMapsApiFeaturesPublicApiCustomMapsCreateErrors,
  RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigData,
  RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigErrors,
  RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses,
  RustMapsApiFeaturesPublicApiCustomMapsCreateResponses,
  RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigData,
  RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigErrors,
  RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses,
  RustMapsApiFeaturesPublicApiCustomMapsGetConfigsData,
  RustMapsApiFeaturesPublicApiCustomMapsGetConfigsErrors,
  RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses,
  RustMapsApiFeaturesPublicApiMapsCreateData,
  RustMapsApiFeaturesPublicApiMapsCreateErrors,
  RustMapsApiFeaturesPublicApiMapsCreateResponses,
  RustMapsApiFeaturesPublicApiMapsGetIdData,
  RustMapsApiFeaturesPublicApiMapsGetIdErrors,
  RustMapsApiFeaturesPublicApiMapsGetIdResponses,
  RustMapsApiFeaturesPublicApiMapsGetSeedSizeData,
  RustMapsApiFeaturesPublicApiMapsGetSeedSizeErrors,
  RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses,
  RustMapsApiFeaturesPublicApiMapsGetSettingsByIdData,
  RustMapsApiFeaturesPublicApiMapsGetSettingsByIdErrors,
  RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses,
  RustMapsApiFeaturesPublicApiMapsGetUrlData,
  RustMapsApiFeaturesPublicApiMapsGetUrlErrors,
  RustMapsApiFeaturesPublicApiMapsGetUrlResponses,
  RustMapsApiFeaturesPublicApiMapsUploadData,
  RustMapsApiFeaturesPublicApiMapsUploadErrors,
  RustMapsApiFeaturesPublicApiMapsUploadResponses,
  RustMapsApiFeaturesPublicApiMiscGetLimitsData,
  RustMapsApiFeaturesPublicApiMiscGetLimitsErrors,
  RustMapsApiFeaturesPublicApiMiscGetLimitsResponses,
  RustMapsApiFeaturesPublicApiSearchSearchByFilterData,
  RustMapsApiFeaturesPublicApiSearchSearchByFilterErrors,
  RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses,
  RustMapsApiFeaturesPublicApiSearchSearchRawData,
  RustMapsApiFeaturesPublicApiSearchSearchRawErrors,
  RustMapsApiFeaturesPublicApiSearchSearchRawResponses,
} from "./types.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class Search {
  /**
   * Get maps from a filter id that was created on the homepage
   */
  public static searchByFilter<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiSearchSearchByFilterData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses,
      RustMapsApiFeaturesPublicApiSearchSearchByFilterErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/filter/{filterId}",
      ...options,
    });
  }

  /**
   * Search for maps using a raw post body, not all settings need to be provided, only passing the size object for example will work
   */
  public static searchRaw<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiSearchSearchRawData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      RustMapsApiFeaturesPublicApiSearchSearchRawResponses,
      RustMapsApiFeaturesPublicApiSearchSearchRawErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/search",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}

export class Misc {
  /**
   * Returns current map gen limits
   */
  public static getLimits<ThrowOnError extends boolean = false>(
    options?: Options<RustMapsApiFeaturesPublicApiMiscGetLimitsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      RustMapsApiFeaturesPublicApiMiscGetLimitsResponses,
      RustMapsApiFeaturesPublicApiMiscGetLimitsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/limits",
      ...options,
    });
  }

  /**
   * Get all custom map configs
   */
  public static customMapsGetConfigs<ThrowOnError extends boolean = false>(
    options?: Options<RustMapsApiFeaturesPublicApiCustomMapsGetConfigsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses,
      RustMapsApiFeaturesPublicApiCustomMapsGetConfigsErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/custom/saved-configs",
      ...options,
    });
  }
}

export class Maps {
  /**
   * Creates a new map generation request
   */
  public static create<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiMapsCreateData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      RustMapsApiFeaturesPublicApiMapsCreateResponses,
      RustMapsApiFeaturesPublicApiMapsCreateErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get a map by id
   */
  public static getId<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiMapsGetIdData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      RustMapsApiFeaturesPublicApiMapsGetIdResponses,
      RustMapsApiFeaturesPublicApiMapsGetIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/{mapId}",
      ...options,
    });
  }

  /**
   * Get a map by seed and size
   */
  public static getSeedSize<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiMapsGetSeedSizeData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses,
      RustMapsApiFeaturesPublicApiMapsGetSeedSizeErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/{size}/{seed}",
      ...options,
    });
  }

  /**
   * Get a map by its download url
   */
  public static getUrl<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiMapsGetUrlData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      RustMapsApiFeaturesPublicApiMapsGetUrlResponses,
      RustMapsApiFeaturesPublicApiMapsGetUrlErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/url",
      ...options,
    });
  }
}

export class SubscriptionRequired {
  /**
   * Get custom map settings for a map
   */
  public static mapsGetSettingsById<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiMapsGetSettingsByIdData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses,
      RustMapsApiFeaturesPublicApiMapsGetSettingsByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/{mapId}/settings",
      ...options,
    });
  }

  /**
   * Returns default config for custom maps
   */
  public static customMapsDefaultConfig<ThrowOnError extends boolean = false>(
    options?: Options<RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses,
      RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/custom",
      ...options,
    });
  }

  /**
   * Used to generate custom maps, provide org id header if the maps are supposed to be generated for an org
   */
  public static customMapsCreate<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiCustomMapsCreateData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      RustMapsApiFeaturesPublicApiCustomMapsCreateResponses,
      RustMapsApiFeaturesPublicApiCustomMapsCreateErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/custom",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Used to generate custom maps, provide org id header if the maps are supposed to be generated for an org
   */
  public static customMapsCreateFromConfig<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses,
      RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigErrors,
      ThrowOnError
    >({
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/custom/saved-config",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}

export class MapsUpload {
  /**
   * Upload a new map
   */
  public static mapsUpload<ThrowOnError extends boolean = false>(
    options: Options<RustMapsApiFeaturesPublicApiMapsUploadData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      RustMapsApiFeaturesPublicApiMapsUploadResponses,
      RustMapsApiFeaturesPublicApiMapsUploadErrors,
      ThrowOnError
    >({
      ...formDataBodySerializer,
      security: [
        {
          name: "X-API-Key",
          type: "apiKey",
        },
      ],
      url: "/v4/maps/upload",
      ...options,
      headers: {
        "Content-Type": null,
        ...options.headers,
      },
    });
  }
}
