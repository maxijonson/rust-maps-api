// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseURL: "https://api.rustmaps.com" | (string & {});
};

export type PagedServiceResponseOfIEnumerableOfMapThumbnailApidto = {
  meta?: PagedMetaDto | null;
  data?: Array<MapThumbnailApidto> | null;
};

export type PagedMetaDto = MetaDto & {
  page?: number | null;
  itemsPerPage?: number | null;
  totalItems?: number | null;
  lastPage?: boolean | null;
};

export type MetaDto = {
  status?: ResponseStatus;
  statusCode?: number;
  errors?: Array<string> | null;
};

export type ResponseStatus = "Success" | "Failed";

export type MapThumbnailApidto = {
  mapId?: string | null;
  seed?: number;
  size?: number;
  url?: string | null;
};

export type MapSearchParametersPublicApi = {
  [key: string]: never;
};

export type MapSearchRequest = {
  searchQuery?: MapSearchQueryDto;
};

export type MapSearchQueryDto = {
  size?: MinMaxFilterDto | null;
  biomes?: Array<BiomeFilterDto> | null;
  monuments?: MinMaxFilterDto | null;
  largeMonuments?: Array<MonumentFilterDto> | null;
  gasStations?: MinMaxFilterDto | null;
  supermarkets?: MinMaxFilterDto | null;
  warehouses?: MinMaxFilterDto | null;
  lighthouses?: MinMaxFilterDto | null;
  islands?: MinMaxFilterDto | null;
  landPercentageOfMap?: MinMaxFilterDto | null;
  caves?: MinMaxFilterDto | null;
  swamps?: MinMaxFilterDto | null;
  mountains?: MinMaxFilterDto | null;
  icebergs?: MinMaxFilterDto | null;
  iceLakes?: MinMaxFilterDto | null;
  rivers?: MinMaxFilterDto | null;
  waterWells?: MinMaxFilterDto | null;
  lakes?: MinMaxFilterDto | null;
  canyons?: MinMaxFilterDto | null;
  oases?: MinMaxFilterDto | null;
  buildableRocks?: MinMaxFilterDto | null;
};

export type MinMaxFilterDto = {
  min?: number;
  max?: number;
};

export type BiomeFilterDto = {
  type?: BiomeTypes;
  settings?: MinMaxFilterDto | null;
};

export type BiomeTypes = 2 | 4 | 8 | 16 | 32;

export type MonumentFilterDto = {
  type?: MonumentTypes;
  selectionStatus?: SelectionStatus;
  requiredBiomes?: Array<BiomeTypes> | null;
  blockedBiomes?: Array<BiomeTypes> | null;
};

export type MonumentTypes =
  | 0
  | 5
  | 10
  | 15
  | 20
  | 25
  | 30
  | 35
  | 40
  | 45
  | 50
  | 55
  | 60
  | 65
  | 70
  | 75
  | 80
  | 85
  | 90
  | 95
  | 100
  | 105
  | 110
  | 115
  | 120
  | 140
  | 145
  | 150
  | 155
  | 160
  | 165
  | 170
  | 175
  | 180
  | 185
  | 190
  | 195
  | 200
  | 205
  | 210
  | 215
  | 220
  | 225
  | 230
  | 235
  | 240
  | 245
  | 250
  | 255
  | 260
  | 265
  | 270
  | 275
  | 280
  | 285
  | 290
  | 295
  | 300
  | 305
  | 310
  | 315
  | 320
  | 325
  | 360
  | 365
  | 370
  | 375
  | 380
  | 385
  | 390
  | 395
  | 400
  | 405
  | 410
  | 415
  | 420
  | 425
  | 430
  | 435
  | 440
  | 445
  | 450
  | 455
  | 460
  | 465
  | 470
  | 475
  | 480
  | 485
  | 490
  | 495
  | 500
  | 505
  | 510
  | 515
  | 520
  | 525
  | 530
  | 535
  | 540
  | 545
  | 550
  | 555
  | 10000;

export type SelectionStatus = "Wanted" | "NotWanted" | "NoPreference";

export type ServiceResponseOfMapGenerationStatsOverviewDto = {
  meta?: MetaDto | null;
  data?: MapGenerationStatsOverviewDto | null;
};

export type MapGenerationStatsOverviewDto = {
  concurrent?: MapGenerationStats | null;
  monthly?: MapGenerationStats | null;
};

export type MapGenerationStats = {
  current?: number;
  allowed?: number;
};

export type GetMapGenLimits = {
  orgId?: string | null;
};

export type ServiceResponseOfPartialMapDto = {
  meta?: MetaDto | null;
  data?: PartialMapDto | null;
};

export type PartialMapDto = {
  id?: string | null;
};

export type ServiceResponseOfMapStatusDto = {
  meta?: MetaDto | null;
  data?: MapStatusDto | null;
};

export type MapStatusDto = {
  mapId?: string | null;
  queuePosition?: number | null;
  state?: MapStates;
  currentStep?: string | null;
  lastGeneratorPingUtc?: string | null;
};

export type MapStates = "Active" | "InQueue" | "Generating" | "Processing" | "Uploading";

export type MapGenerationRequestDto = {
  size?: number;
  seed?: number;
  staging?: boolean;
};

export type ServiceResponseOfMapApidto = {
  meta?: MetaDto | null;
  data?: MapApidto | null;
};

export type MapApidto = {
  id?: string | null;
  type?: string | null;
  seed?: number;
  size?: number;
  saveVersion?: number;
  url?: string | null;
  rawImageUrl?: string | null;
  imageUrl?: string | null;
  imageIconUrl?: string | null;
  thumbnailUrl?: string | null;
  isStaging?: boolean;
  isCustomMap?: boolean;
  canDownload?: boolean;
  downloadUrl?: string | null;
  totalMonuments?: number;
  monuments?: Array<MonumentApidto> | null;
  landPercentageOfMap?: number;
  biomePercentages?: Biomes | null;
  islands?: number;
  mountains?: number;
  iceLakes?: number;
  rivers?: number;
  lakes?: number;
  canyons?: number;
  oases?: number;
  buildableRocks?: number;
};

export type MonumentApidto = {
  type?: MonumentTypes;
  coordinates?: Coordinates;
  nameOverride?: string | null;
};

export type Coordinates = {
  x?: number;
  y?: number;
};

export type Biomes = {
  s?: number;
  d?: number;
  f?: number;
  t?: number;
  j?: number;
};

export type QueryRequest = {
  [key: string]: never;
};

export type ServiceResponseOfCustomMapSettings = {
  meta?: MetaDto | null;
  data?: CustomMapSettings | null;
};

export type CustomMapSettings = {
  generateRingRoad?: SelectionStatus | null;
  generateAboveGroundTrainTracks?: SelectionStatus | null;
  removeSmallPowerLines?: boolean | null;
  removeLargePowerLines?: boolean | null;
  removeCarWrecks?: boolean | null;
  removeRivers?: boolean | null;
  allowBuildingOnRoads?: boolean | null;
  modifyTiers?: boolean | null;
  trySpawningOutpostInCenter?: boolean | null;
  terrainConfiguration?: TerrainConfiguration | null;
  oilRigConfigurations?: Array<OilRigConfiguration> | null;
  safezones?: Array<PrefabCustomizableMonumentConfiguration> | null;
  largeMonuments?: Array<LargeMonumentConfiguration> | null;
  smallMonuments?: Array<BasicMonumentConfiguration> | null;
  harbors?: Array<BasicMonumentConfiguration> | null;
  waterWells?: Array<BasicMonumentConfiguration> | null;
  caves?: Array<BasicMonumentConfiguration> | null;
  mountains?: Array<BasicMonumentConfiguration> | null;
  quarries?: Array<BasicMonumentConfiguration> | null;
  icebergs?: Array<BasicMonumentConfiguration> | null;
  iceLakes?: Array<BasicMonumentConfiguration> | null;
  ruins?: Array<BasicMonumentConfiguration> | null;
  fileName?: {
    [key: string]: string;
  } | null;
  webhook?: WebhookSettingsDto | null;
  underwaterLabsConfiguration?: LabConfiguration | null;
  lakesConfiguration?: LabConfiguration | null;
  oasesConfiguration?: LabConfiguration | null;
  canyonsConfiguration?: LabConfiguration | null;
  blockedPrefabs?: Array<string> | null;
  removeUndergroundTunnels?: boolean | null;
  embedCargoShipPath?: boolean | null;
};

export type TerrainConfiguration = {
  islandConfig?: IslandConfiguration | null;
  mountainConfig?: MountainConfiguration | null;
  tierConfig?: TiersConfiguration | null;
  biomeConfig?: BiomesConfiguration | null;
  flattenShoreAndBay?: boolean | null;
  biomeAxisAngle?: BiomeAngle | null;
  lootAxisAngle?: LootAngle | null;
};

export type IslandConfiguration = {
  enabled?: boolean;
  intensity?: number;
};

export type MountainConfiguration = {
  reduceMountains?: boolean;
};

export type TiersConfiguration = {
  enabled?: boolean;
  tier0Percentage?: number | null;
  tier1Percentage?: number | null;
  tier2Percentage?: number | null;
};

export type BiomesConfiguration = {
  enabled?: boolean;
  aridPercentage?: number | null;
  temperatePercentage?: number | null;
  tundraPercentage?: number | null;
  arcticPercentage?: number | null;
  junglePercentage?: number | null;
};

export type BiomeAngle =
  | "TopSnowBottomDesert"
  | "LeftDesertRightSnow"
  | "TopDesertBottomSnow"
  | "LeftSnowRightDesert"
  | "Default";

export type LootAngle =
  | "TopTier2BottomTier0"
  | "LeftTier2RightTier0"
  | "TopTier0BottomTier2"
  | "LeftTier0RightTier2"
  | "Default";

export type OilRigConfiguration = LargeMonumentConfiguration & {
  biomePreference?: BiomePreference | null;
  position?: OilRigPosition | null;
};

export type BiomePreference = {
  enabled?: boolean;
  biome?: BiomeTypes;
};

export type OilRigPosition = {
  enabled?: boolean;
  alignment?: MonumentAlignment;
  position?: number;
};

export type MonumentAlignment = "Top" | "Left" | "Right" | "Bottom";

export type LargeMonumentConfiguration = BasicMonumentConfiguration & {
  desired?: boolean;
};

export type BasicMonumentConfiguration = {
  type?: MonumentTypes;
  blocked?: boolean;
  allowedToSetBiomes?: boolean;
  biomePreferences?: Array<MonumentBiomePreference> | null;
};

export type MonumentBiomePreference = {
  biomeType?: BiomeTypes;
  selection?: SelectionStatus;
};

export type PrefabCustomizableMonumentConfiguration = LargeMonumentConfiguration & {
  customPrefab?: CustomPrefab | null;
};

export type CustomPrefab = {
  enabled?: boolean;
  id?: string | null;
};

export type WebhookSettingsDto = {
  enabled?: boolean;
  url?: string | null;
};

export type LabConfiguration = {
  minAmount?: number;
  maxAmount?: number;
  blocked?: boolean;
  generate?: SelectionStatus | null;
};

export type MapGetByUrlRequest = {
  [key: string]: never;
};

export type ServiceResponseOfUploadedMapDto = {
  meta?: MetaDto | null;
  data?: UploadedMapDto | null;
};

export type UploadedMapDto = {
  id?: string | null;
  thumbnailUrl?: string | null;
  uploadedUtc?: string;
  state?: MapStates;
  displayName?: string | null;
  slug?: string | null;
  purchaseUrl?: string | null;
  seed?: number | null;
  downloadUrl?: string | null;
  note?: string | null;
  estimatedDeletionDate?: string | null;
};

export type MapUploadNormalDto = {
  map: Blob | File;
  note?: string | null;
  staging?: boolean;
};

export type CreateApiCustomMapRequestDto = {
  orgId?: string | null;
  mapParameters?: MapGenerationRequestDto;
  customMapSettings?: CustomMapSettings;
};

export type CreateApiCustomMapRequestFromConfigDto = {
  mapParameters?: MapGenerationRequestDto;
  /**
   * Name of the config to use
   */
  configName?: string;
};

export type ServiceResponseOfListOfCustomMapSettingsDto = {
  meta?: MetaDto | null;
  data?: Array<CustomMapSettingsDto> | null;
};

export type CustomMapSettingsDto = {
  id?: string | null;
  name?: string | null;
  settings?: CustomMapSettings | null;
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterData = {
  body?: never;
  path: {
    filterId: string | null;
  };
  query: {
    /**
     * Pagination starts at 0
     */
    page: number;
    staging?: boolean | null;
    orgId?: string | null;
    customMaps?: boolean | null;
    sortBy?: string | null;
  };
  url: "/v4/maps/filter/{filterId}";
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses = {
  /**
   * Success
   */
  200: PagedServiceResponseOfIEnumerableOfMapThumbnailApidto;
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterResponse =
  RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses[keyof RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses];

export type RustMapsApiFeaturesPublicApiSearchSearchRawData = {
  body: MapSearchRequest;
  path?: never;
  query: {
    /**
     * Pagination starts at 0
     */
    page: number;
    staging?: boolean | null;
    includeAllProtocols?: boolean | null;
    orgId?: string | null;
    customMaps?: boolean | null;
    ignoreVisitedMaps?: boolean | null;
    sortBy?: string | null;
  };
  url: "/v4/maps/search";
};

export type RustMapsApiFeaturesPublicApiSearchSearchRawErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiSearchSearchRawResponses = {
  /**
   * Success
   */
  200: PagedServiceResponseOfIEnumerableOfMapThumbnailApidto;
};

export type RustMapsApiFeaturesPublicApiSearchSearchRawResponse =
  RustMapsApiFeaturesPublicApiSearchSearchRawResponses[keyof RustMapsApiFeaturesPublicApiSearchSearchRawResponses];

export type RustMapsApiFeaturesPublicApiMiscGetLimitsData = {
  body?: never;
  headers?: {
    "x-org-id"?: string | null;
  };
  path?: never;
  query?: never;
  url: "/v4/maps/limits";
};

export type RustMapsApiFeaturesPublicApiMiscGetLimitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type RustMapsApiFeaturesPublicApiMiscGetLimitsResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfMapGenerationStatsOverviewDto;
};

export type RustMapsApiFeaturesPublicApiMiscGetLimitsResponse =
  RustMapsApiFeaturesPublicApiMiscGetLimitsResponses[keyof RustMapsApiFeaturesPublicApiMiscGetLimitsResponses];

export type RustMapsApiFeaturesPublicApiMapsCreateData = {
  body: MapGenerationRequestDto;
  path?: never;
  query?: never;
  url: "/v4/maps";
};

export type RustMapsApiFeaturesPublicApiMapsCreateErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map already exists, but is not ready yet
   */
  409: ServiceResponseOfPartialMapDto;
};

export type RustMapsApiFeaturesPublicApiMapsCreateError =
  RustMapsApiFeaturesPublicApiMapsCreateErrors[keyof RustMapsApiFeaturesPublicApiMapsCreateErrors];

export type RustMapsApiFeaturesPublicApiMapsCreateResponses = {
  /**
   * Map already exists
   */
  200: unknown;
  /**
   * Map generation request successful
   */
  201: ServiceResponseOfMapStatusDto;
};

export type RustMapsApiFeaturesPublicApiMapsCreateResponse =
  RustMapsApiFeaturesPublicApiMapsCreateResponses[keyof RustMapsApiFeaturesPublicApiMapsCreateResponses];

export type RustMapsApiFeaturesPublicApiMapsGetIdData = {
  body?: never;
  path: {
    mapId: string | null;
  };
  query?: never;
  url: "/v4/maps/{mapId}";
};

export type RustMapsApiFeaturesPublicApiMapsGetIdErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map not found
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetIdResponses = {
  /**
   * Returns map data
   */
  200: ServiceResponseOfMapApidto;
};

export type RustMapsApiFeaturesPublicApiMapsGetIdResponse =
  RustMapsApiFeaturesPublicApiMapsGetIdResponses[keyof RustMapsApiFeaturesPublicApiMapsGetIdResponses];

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeData = {
  body?: never;
  path: {
    size: string | null;
    seed: string | null;
  };
  query: {
    staging: boolean;
  };
  url: "/v4/maps/{size}/{seed}";
};

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map not found
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfMapApidto;
};

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponse =
  RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses[keyof RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses];

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdData = {
  body?: never;
  path: {
    mapId: string | null;
  };
  query?: never;
  url: "/v4/maps/{mapId}/settings";
};

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * No access to map
   */
  403: unknown;
  /**
   * Map not custom map settings
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses = {
  /**
   * Returns custom map settings
   */
  200: ServiceResponseOfCustomMapSettings;
};

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponse =
  RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses[keyof RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses];

export type RustMapsApiFeaturesPublicApiMapsGetUrlData = {
  body?: never;
  path?: never;
  query: {
    url: string | null;
  };
  url: "/v4/maps/url";
};

export type RustMapsApiFeaturesPublicApiMapsGetUrlErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map not found
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetUrlResponses = {
  /**
   * Returns map data
   */
  200: ServiceResponseOfMapApidto;
};

export type RustMapsApiFeaturesPublicApiMapsGetUrlResponse =
  RustMapsApiFeaturesPublicApiMapsGetUrlResponses[keyof RustMapsApiFeaturesPublicApiMapsGetUrlResponses];

export type RustMapsApiFeaturesPublicApiMapsUploadData = {
  body: MapUploadNormalDto;
  path?: never;
  query?: never;
  url: "/v4/maps/upload";
};

export type RustMapsApiFeaturesPublicApiMapsUploadErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsUploadResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfUploadedMapDto;
  /**
   * Created
   */
  201: ServiceResponseOfUploadedMapDto;
};

export type RustMapsApiFeaturesPublicApiMapsUploadResponse =
  RustMapsApiFeaturesPublicApiMapsUploadResponses[keyof RustMapsApiFeaturesPublicApiMapsUploadResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v4/maps/custom";
};

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfCustomMapSettings;
};

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponse =
  RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsCreateData = {
  body: CreateApiCustomMapRequestDto;
  headers?: {
    "x-org-id"?: string | null;
  };
  path?: never;
  query?: never;
  url: "/v4/maps/custom";
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map already exists, but is not ready yet
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateResponses = {
  /**
   * Map already exists
   */
  200: unknown;
  /**
   * Map generation request successfully
   */
  201: ServiceResponseOfMapStatusDto;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateResponse =
  RustMapsApiFeaturesPublicApiCustomMapsCreateResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsCreateResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigData = {
  body: CreateApiCustomMapRequestFromConfigDto;
  headers?: {
    "x-org-id"?: string | null;
  };
  path?: never;
  query?: never;
  url: "/v4/maps/custom/saved-config";
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map already exists, but is not ready yet
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses = {
  /**
   * Map already exists
   */
  200: unknown;
  /**
   * Map generation request successfully
   */
  201: ServiceResponseOfMapStatusDto;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponse =
  RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v4/maps/custom/saved-configs";
};

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfListOfCustomMapSettingsDto;
};

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponse =
  RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses];
