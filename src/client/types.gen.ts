// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: "https://api.rustmaps.com" | (string & {});
};

export type PagedServiceResponseOfIEnumerableOfMapThumbnailApidto = {
  meta?: PagedMetaDto | null;
  data?: Array<MapThumbnailApidto> | null;
};

export type PagedMetaDto = MetaDto & {
  page?: number | null;
  itemsPerPage?: number | null;
  totalItems?: number | null;
  lastPage?: boolean | null;
};

export type MetaDto = {
  status?: ResponseStatus;
  statusCode?: number;
  errors?: Array<string> | null;
};

export const ResponseStatus = {
  /**
   * Success
   */
  Success: "Success",
  /**
   * Failed
   */
  Failed: "Failed",
} as const;

export type ResponseStatus = (typeof ResponseStatus)[keyof typeof ResponseStatus];

export type MapThumbnailApidto = {
  mapId?: string | null;
  seed?: number;
  size?: number;
  url?: string | null;
};

export type MapSearchParametersPublicApi = {
  [key: string]: never;
};

export type MapSearchRequest = {
  searchQuery?: MapSearchQueryDto;
};

export type MapSearchQueryDto = {
  size?: MinMaxFilterDto | null;
  biomes?: Array<BiomeFilterDto> | null;
  monuments?: MinMaxFilterDto | null;
  largeMonuments?: Array<MonumentFilterDto> | null;
  gasStations?: MinMaxFilterDto | null;
  supermarkets?: MinMaxFilterDto | null;
  warehouses?: MinMaxFilterDto | null;
  lighthouses?: MinMaxFilterDto | null;
  islands?: MinMaxFilterDto | null;
  landPercentageOfMap?: MinMaxFilterDto | null;
  caves?: MinMaxFilterDto | null;
  swamps?: MinMaxFilterDto | null;
  mountains?: MinMaxFilterDto | null;
  icebergs?: MinMaxFilterDto | null;
  iceLakes?: MinMaxFilterDto | null;
  rivers?: MinMaxFilterDto | null;
  waterWells?: MinMaxFilterDto | null;
  lakes?: MinMaxFilterDto | null;
  canyons?: MinMaxFilterDto | null;
  oases?: MinMaxFilterDto | null;
  buildableRocks?: MinMaxFilterDto | null;
};

export type MinMaxFilterDto = {
  min?: number;
  max?: number;
};

export type BiomeFilterDto = {
  type?: BiomeTypes;
  settings?: MinMaxFilterDto | null;
};

export const BiomeTypes = {
  /**
   * Snow
   */
  Snow: "Snow",
  /**
   * Desert
   */
  Desert: "Desert",
  /**
   * Forest
   */
  Forest: "Forest",
  /**
   * Tundra
   */
  Tundra: "Tundra",
  /**
   * Jungle
   */
  Jungle: "Jungle",
} as const;

export type BiomeTypes = (typeof BiomeTypes)[keyof typeof BiomeTypes];

export type MonumentFilterDto = {
  type?: MonumentTypes;
  selectionStatus?: SelectionStatus;
  requiredBiomes?: Array<BiomeTypes> | null;
  blockedBiomes?: Array<BiomeTypes> | null;
};

export const MonumentTypes = {
  /**
   * Outpost
   */
  Outpost: "Outpost",
  /**
   * Bandit Town
   */
  BanditTown: "Bandit Town",
  /**
   * Fishing Village A
   */
  FishingVillageA: "Fishing Village A",
  /**
   * Fishing Village B
   */
  FishingVillageB: "Fishing Village B",
  /**
   * Fishing Village C
   */
  FishingVillageC: "Fishing Village C",
  /**
   * Ranch
   */
  Ranch: "Ranch",
  /**
   * Large Barn
   */
  LargeBarn: "Large Barn",
  /**
   * Excavator
   */
  Excavator: "Excavator",
  /**
   * Airfield
   */
  Airfield: "Airfield",
  /**
   * Junkyard
   */
  Junkyard: "Junkyard",
  /**
   * Launch Site
   */
  LaunchSite: "Launch Site",
  /**
   * Military Tunnels
   */
  MilitaryTunnels: "Military Tunnels",
  /**
   * Powerplant
   */
  Powerplant: "Powerplant",
  /**
   * Radtown
   */
  Radtown: "Radtown",
  /**
   * Trainyard
   */
  Trainyard: "Trainyard",
  /**
   * Water Treatment
   */
  WaterTreatment: "Water Treatment",
  /**
   * Sphere Tank
   */
  SphereTank: "Sphere Tank",
  /**
   * Satellite Dish
   */
  SatelliteDish: "Satellite Dish",
  /**
   * Large Oilrig
   */
  LargeOilrig: "Large Oilrig",
  /**
   * Small Oilrig
   */
  SmallOilrig: "Small Oilrig",
  /**
   * Nuclear Missile Silo
   */
  NuclearMissileSilo: "Nuclear Missile Silo",
  /**
   * Ziggurat
   */
  Ziggurat: "Ziggurat",
  /**
   * Gas Station
   */
  GasStation: "Gas Station",
  /**
   * Supermarket
   */
  Supermarket: "Supermarket",
  /**
   * Warehouse
   */
  Warehouse: "Warehouse",
  /**
   * Lighthouse
   */
  Lighthouse: "Lighthouse",
  /**
   * Sewer Branch
   */
  SewerBranch: "Sewer Branch",
  /**
   * Swamp A
   */
  SwampA: "Swamp A",
  /**
   * Swamp B
   */
  SwampB: "Swamp B",
  /**
   * Swamp C
   */
  SwampC: "Swamp C",
  /**
   * Military Base A
   */
  MilitaryBaseA: "Military Base A",
  /**
   * Military Base B
   */
  MilitaryBaseB: "Military Base B",
  /**
   * Military Base C
   */
  MilitaryBaseC: "Military Base C",
  /**
   * Military Base D
   */
  MilitaryBaseD: "Military Base D",
  /**
   * Arctic Research Base A
   */
  ArcticResearchBaseA: "Arctic Research Base A",
  /**
   * Small Harbor
   */
  SmallHarbor: "Small Harbor",
  /**
   * Large Harbor
   */
  LargeHarbor: "Large Harbor",
  /**
   * Ferry Terminal
   */
  FerryTerminal: "Ferry Terminal",
  /**
   * Water Well A
   */
  WaterWellA: "Water Well A",
  /**
   * Water Well B
   */
  WaterWellB: "Water Well B",
  /**
   * Water Well C
   */
  WaterWellC: "Water Well C",
  /**
   * Water Well D
   */
  WaterWellD: "Water Well D",
  /**
   * Water Well E
   */
  WaterWellE: "Water Well E",
  /**
   * Cave Large Hard
   */
  CaveLargeHard: "Cave Large Hard",
  /**
   * Cave Large Medium
   */
  CaveLargeMedium: "Cave Large Medium",
  /**
   * Cave Large Sewers Hard
   */
  CaveLargeSewersHard: "Cave Large Sewers Hard",
  /**
   * Cave Medium Easy
   */
  CaveMediumEasy: "Cave Medium Easy",
  /**
   * Cave Medium Hard
   */
  CaveMediumHard: "Cave Medium Hard",
  /**
   * Cave Medium Medium
   */
  CaveMediumMedium: "Cave Medium Medium",
  /**
   * Cave Small Easy
   */
  CaveSmallEasy: "Cave Small Easy",
  /**
   * Cave Small Hard
   */
  CaveSmallHard: "Cave Small Hard",
  /**
   * Cave Small Medium
   */
  CaveSmallMedium: "Cave Small Medium",
  /**
   * Mountain 1
   */
  Mountain1: "Mountain 1",
  /**
   * Mountain 2
   */
  Mountain2: "Mountain 2",
  /**
   * Mountain 3
   */
  Mountain3: "Mountain 3",
  /**
   * Mountain 4
   */
  Mountain4: "Mountain 4",
  /**
   * Mountain 5
   */
  Mountain5: "Mountain 5",
  /**
   * Sulfur Quarry
   */
  SulfurQuarry: "Sulfur Quarry",
  /**
   * Stone Quarry
   */
  StoneQuarry: "Stone Quarry",
  /**
   * Hqm Quarry
   */
  HqmQuarry: "Hqm Quarry",
  /**
   * Iceberg 1
   */
  Iceberg1: "Iceberg 1",
  /**
   * Iceberg 2
   */
  Iceberg2: "Iceberg 2",
  /**
   * Iceberg 3
   */
  Iceberg3: "Iceberg 3",
  /**
   * Iceberg 4
   */
  Iceberg4: "Iceberg 4",
  /**
   * Iceberg 5
   */
  Iceberg5: "Iceberg 5",
  /**
   * Ice Lake 1
   */
  IceLake1: "Ice Lake 1",
  /**
   * Ice Lake 2
   */
  IceLake2: "Ice Lake 2",
  /**
   * Ice Lake 3
   */
  IceLake3: "Ice Lake 3",
  /**
   * Ice Lake 4
   */
  IceLake4: "Ice Lake 4",
  /**
   * Ruin A
   */
  RuinA: "Ruin A",
  /**
   * Ruin B
   */
  RuinB: "Ruin B",
  /**
   * Ruin C
   */
  RuinC: "Ruin C",
  /**
   * Ruin D
   */
  RuinD: "Ruin D",
  /**
   * Ruin E
   */
  RuinE: "Ruin E",
} as const;

export type MonumentTypes = (typeof MonumentTypes)[keyof typeof MonumentTypes];

export const SelectionStatus = {
  /**
   * Wanted
   */
  Wanted: "Wanted",
  /**
   * NotWanted
   */
  NotWanted: "NotWanted",
  /**
   * NoPreference
   */
  NoPreference: "NoPreference",
} as const;

export type SelectionStatus = (typeof SelectionStatus)[keyof typeof SelectionStatus];

export type ServiceResponseOfMapGenerationStatsOverviewDto = {
  meta?: MetaDto | null;
  data?: MapGenerationStatsOverviewDto | null;
};

export type MapGenerationStatsOverviewDto = {
  concurrent?: MapGenerationStats | null;
  monthly?: MapGenerationStats | null;
};

export type MapGenerationStats = {
  current?: number;
  allowed?: number;
};

export type GetMapGenLimits = {
  orgId?: string | null;
};

export type ServiceResponseOfPartialMapDto = {
  meta?: MetaDto | null;
  data?: PartialMapDto | null;
};

export type PartialMapDto = {
  id?: string | null;
};

export type ServiceResponseOfMapStatusDto = {
  meta?: MetaDto | null;
  data?: MapStatusDto | null;
};

export type MapStatusDto = {
  mapId?: string | null;
  queuePosition?: number | null;
  state?: MapStates;
  currentStep?: string | null;
  lastGeneratorPingUtc?: string | null;
};

export const MapStates = {
  /**
   * Active
   */
  Active: "Active",
  /**
   * InQueue
   */
  InQueue: "InQueue",
  /**
   * Generating
   */
  Generating: "Generating",
  /**
   * Processing
   */
  Processing: "Processing",
  /**
   * Uploading
   */
  Uploading: "Uploading",
} as const;

export type MapStates = (typeof MapStates)[keyof typeof MapStates];

export type MapGenerationRequestDto = {
  size?: number;
  seed?: number;
  staging?: boolean;
};

export type ServiceResponseOfMapApidto = {
  meta?: MetaDto | null;
  data?: MapApidto | null;
};

export type MapApidto = {
  id?: string | null;
  type?: string | null;
  seed?: number;
  size?: number;
  saveVersion?: number;
  url?: string | null;
  rawImageUrl?: string | null;
  imageUrl?: string | null;
  imageIconUrl?: string | null;
  thumbnailUrl?: string | null;
  isStaging?: boolean;
  isCustomMap?: boolean;
  canDownload?: boolean;
  downloadUrl?: string | null;
  totalMonuments?: number;
  monuments?: Array<MonumentApidto> | null;
  landPercentageOfMap?: number;
  biomePercentages?: Biomes | null;
  islands?: number;
  mountains?: number;
  iceLakes?: number;
  rivers?: number;
  lakes?: number;
  canyons?: number;
  oases?: number;
  buildableRocks?: number;
};

export type MonumentApidto = {
  type?: MonumentTypes;
  coordinates?: Coordinates;
  nameOverride?: string | null;
};

export type Coordinates = {
  x?: number;
  y?: number;
};

export type Biomes = {
  s?: number;
  d?: number;
  f?: number;
  t?: number;
  j?: number;
};

export type QueryRequest = {
  [key: string]: never;
};

export type ServiceResponseOfCustomMapSettings = {
  meta?: MetaDto | null;
  data?: CustomMapSettings | null;
};

export type CustomMapSettings = {
  generateRingRoad?: SelectionStatus | null;
  generateAboveGroundTrainTracks?: SelectionStatus | null;
  removeSmallPowerLines?: boolean | null;
  removeLargePowerLines?: boolean | null;
  removeCarWrecks?: boolean | null;
  removeRivers?: boolean | null;
  allowBuildingOnRoads?: boolean | null;
  modifyTiers?: boolean | null;
  trySpawningOutpostInCenter?: boolean | null;
  terrainConfiguration?: TerrainConfiguration | null;
  oilRigConfigurations?: Array<OilRigConfiguration> | null;
  safezones?: Array<PrefabCustomizableMonumentConfiguration> | null;
  largeMonuments?: Array<LargeMonumentConfiguration> | null;
  smallMonuments?: Array<BasicMonumentConfiguration> | null;
  harbors?: Array<BasicMonumentConfiguration> | null;
  waterWells?: Array<BasicMonumentConfiguration> | null;
  caves?: Array<BasicMonumentConfiguration> | null;
  mountains?: Array<BasicMonumentConfiguration> | null;
  quarries?: Array<BasicMonumentConfiguration> | null;
  icebergs?: Array<BasicMonumentConfiguration> | null;
  iceLakes?: Array<BasicMonumentConfiguration> | null;
  ruins?: Array<BasicMonumentConfiguration> | null;
  fileName?: {
    [key: string]: string;
  } | null;
  webhook?: WebhookSettingsDto | null;
  underwaterLabsConfiguration?: LabConfiguration | null;
  lakesConfiguration?: LabConfiguration | null;
  oasesConfiguration?: LabConfiguration | null;
  canyonsConfiguration?: LabConfiguration | null;
  blockedPrefabs?: Array<string> | null;
  removeUndergroundTunnels?: boolean | null;
  embedCargoShipPath?: boolean | null;
};

export type TerrainConfiguration = {
  islandConfig?: IslandConfiguration | null;
  mountainConfig?: MountainConfiguration | null;
  tierConfig?: TiersConfiguration | null;
  biomeConfig?: BiomesConfiguration | null;
  flattenShoreAndBay?: boolean | null;
  biomeAxisAngle?: BiomeAngle | null;
  lootAxisAngle?: LootAngle | null;
};

export type IslandConfiguration = {
  enabled?: boolean;
  intensity?: number;
};

export type MountainConfiguration = {
  reduceMountains?: boolean;
};

export type TiersConfiguration = {
  enabled?: boolean;
  tier0Percentage?: number | null;
  tier1Percentage?: number | null;
  tier2Percentage?: number | null;
};

export type BiomesConfiguration = {
  enabled?: boolean;
  aridPercentage?: number | null;
  temperatePercentage?: number | null;
  tundraPercentage?: number | null;
  arcticPercentage?: number | null;
  junglePercentage?: number | null;
};

export const BiomeAngle = {
  /**
   * TopSnowBottomDesert
   */
  TopSnowBottomDesert: "TopSnowBottomDesert",
  /**
   * LeftDesertRightSnow
   */
  LeftDesertRightSnow: "LeftDesertRightSnow",
  /**
   * TopDesertBottomSnow
   */
  TopDesertBottomSnow: "TopDesertBottomSnow",
  /**
   * LeftSnowRightDesert
   */
  LeftSnowRightDesert: "LeftSnowRightDesert",
  /**
   * Default
   */
  Default: "Default",
} as const;

export type BiomeAngle = (typeof BiomeAngle)[keyof typeof BiomeAngle];

export const LootAngle = {
  /**
   * TopTier2BottomTier0
   */
  TopTier2BottomTier0: "TopTier2BottomTier0",
  /**
   * LeftTier2RightTier0
   */
  LeftTier2RightTier0: "LeftTier2RightTier0",
  /**
   * TopTier0BottomTier2
   */
  TopTier0BottomTier2: "TopTier0BottomTier2",
  /**
   * LeftTier0RightTier2
   */
  LeftTier0RightTier2: "LeftTier0RightTier2",
  /**
   * Default
   */
  Default: "Default",
} as const;

export type LootAngle = (typeof LootAngle)[keyof typeof LootAngle];

export type OilRigConfiguration = LargeMonumentConfiguration & {
  biomePreference?: BiomePreference | null;
  position?: OilRigPosition | null;
};

export type BiomePreference = {
  enabled?: boolean;
  biome?: BiomeTypes;
};

export type OilRigPosition = {
  enabled?: boolean;
  alignment?: MonumentAlignment;
  position?: number;
};

export const MonumentAlignment = {
  /**
   * Top
   */
  Top: "Top",
  /**
   * Left
   */
  Left: "Left",
  /**
   * Right
   */
  Right: "Right",
  /**
   * Bottom
   */
  Bottom: "Bottom",
} as const;

export type MonumentAlignment = (typeof MonumentAlignment)[keyof typeof MonumentAlignment];

export type LargeMonumentConfiguration = BasicMonumentConfiguration & {
  desired?: boolean;
};

export type BasicMonumentConfiguration = {
  type?: MonumentTypes;
  blocked?: boolean;
  allowedToSetBiomes?: boolean;
  biomePreferences?: Array<MonumentBiomePreference> | null;
};

export type MonumentBiomePreference = {
  biomeType?: BiomeTypes;
  selection?: SelectionStatus;
};

export type PrefabCustomizableMonumentConfiguration = LargeMonumentConfiguration & {
  customPrefab?: CustomPrefab | null;
};

export type CustomPrefab = {
  enabled?: boolean;
  id?: string | null;
};

export type WebhookSettingsDto = {
  enabled?: boolean;
  url?: string | null;
};

export type LabConfiguration = {
  minAmount?: number;
  maxAmount?: number;
  blocked?: boolean;
  generate?: SelectionStatus | null;
};

export type MapGetByUrlRequest = {
  [key: string]: never;
};

export type ServiceResponseOfUploadedMapDto = {
  meta?: MetaDto | null;
  data?: UploadedMapDto | null;
};

export type UploadedMapDto = {
  id?: string | null;
  thumbnailUrl?: string | null;
  uploadedUtc?: string;
  state?: MapStates;
  displayName?: string | null;
  slug?: string | null;
  purchaseUrl?: string | null;
  seed?: number | null;
  downloadUrl?: string | null;
  note?: string | null;
  estimatedDeletionDate?: string | null;
};

export type MapUploadNormalDto = {
  map: Blob | File;
  note?: string | null;
  staging?: boolean;
};

export type CreateApiCustomMapRequestDto = {
  orgId?: string | null;
  mapParameters?: MapGenerationRequestDto;
  customMapSettings?: CustomMapSettings;
};

export type CreateApiCustomMapRequestFromConfigDto = {
  mapParameters?: MapGenerationRequestDto;
  /**
   * Name of the config to use
   */
  configName?: string;
};

export type ServiceResponseOfListOfCustomMapSettingsDto = {
  meta?: MetaDto | null;
  data?: Array<CustomMapSettingsDto> | null;
};

export type CustomMapSettingsDto = {
  id?: string | null;
  name?: string | null;
  settings?: CustomMapSettings | null;
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterData = {
  body?: never;
  path: {
    filterId: string | null;
  };
  query: {
    /**
     * Pagination starts at 0
     */
    page: number;
    staging?: boolean | null;
    orgId?: string | null;
    customMaps?: boolean | null;
    sortBy?: string | null;
  };
  url: "/v4/maps/filter/{filterId}";
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses = {
  /**
   * Success
   */
  200: PagedServiceResponseOfIEnumerableOfMapThumbnailApidto;
};

export type RustMapsApiFeaturesPublicApiSearchSearchByFilterResponse =
  RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses[keyof RustMapsApiFeaturesPublicApiSearchSearchByFilterResponses];

export type RustMapsApiFeaturesPublicApiSearchSearchRawData = {
  body: MapSearchRequest;
  path?: never;
  query: {
    /**
     * Pagination starts at 0
     */
    page: number;
    staging?: boolean | null;
    includeAllProtocols?: boolean | null;
    orgId?: string | null;
    customMaps?: boolean | null;
    ignoreVisitedMaps?: boolean | null;
    sortBy?: string | null;
  };
  url: "/v4/maps/search";
};

export type RustMapsApiFeaturesPublicApiSearchSearchRawErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiSearchSearchRawResponses = {
  /**
   * Success
   */
  200: PagedServiceResponseOfIEnumerableOfMapThumbnailApidto;
};

export type RustMapsApiFeaturesPublicApiSearchSearchRawResponse =
  RustMapsApiFeaturesPublicApiSearchSearchRawResponses[keyof RustMapsApiFeaturesPublicApiSearchSearchRawResponses];

export type RustMapsApiFeaturesPublicApiMiscGetLimitsData = {
  body?: never;
  headers?: {
    "x-org-id"?: string | null;
  };
  path?: never;
  query?: never;
  url: "/v4/maps/limits";
};

export type RustMapsApiFeaturesPublicApiMiscGetLimitsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type RustMapsApiFeaturesPublicApiMiscGetLimitsResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfMapGenerationStatsOverviewDto;
};

export type RustMapsApiFeaturesPublicApiMiscGetLimitsResponse =
  RustMapsApiFeaturesPublicApiMiscGetLimitsResponses[keyof RustMapsApiFeaturesPublicApiMiscGetLimitsResponses];

export type RustMapsApiFeaturesPublicApiMapsCreateData = {
  body: MapGenerationRequestDto;
  path?: never;
  query?: never;
  url: "/v4/maps";
};

export type RustMapsApiFeaturesPublicApiMapsCreateErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map already exists, but is not ready yet
   */
  409: ServiceResponseOfPartialMapDto;
};

export type RustMapsApiFeaturesPublicApiMapsCreateError =
  RustMapsApiFeaturesPublicApiMapsCreateErrors[keyof RustMapsApiFeaturesPublicApiMapsCreateErrors];

export type RustMapsApiFeaturesPublicApiMapsCreateResponses = {
  /**
   * Map already exists
   */
  200: unknown;
  /**
   * Map generation request successful
   */
  201: ServiceResponseOfMapStatusDto;
};

export type RustMapsApiFeaturesPublicApiMapsCreateResponse =
  RustMapsApiFeaturesPublicApiMapsCreateResponses[keyof RustMapsApiFeaturesPublicApiMapsCreateResponses];

export type RustMapsApiFeaturesPublicApiMapsGetIdData = {
  body?: never;
  path: {
    mapId: string | null;
  };
  query?: never;
  url: "/v4/maps/{mapId}";
};

export type RustMapsApiFeaturesPublicApiMapsGetIdErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map not found
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetIdResponses = {
  /**
   * Returns map data
   */
  200: ServiceResponseOfMapApidto;
};

export type RustMapsApiFeaturesPublicApiMapsGetIdResponse =
  RustMapsApiFeaturesPublicApiMapsGetIdResponses[keyof RustMapsApiFeaturesPublicApiMapsGetIdResponses];

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeData = {
  body?: never;
  path: {
    size: string | null;
    seed: string | null;
  };
  query: {
    staging: boolean;
  };
  url: "/v4/maps/{size}/{seed}";
};

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map not found
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfMapApidto;
};

export type RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponse =
  RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses[keyof RustMapsApiFeaturesPublicApiMapsGetSeedSizeResponses];

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdData = {
  body?: never;
  path: {
    mapId: string | null;
  };
  query?: never;
  url: "/v4/maps/{mapId}/settings";
};

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * No access to map
   */
  403: unknown;
  /**
   * Map not custom map settings
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses = {
  /**
   * Returns custom map settings
   */
  200: ServiceResponseOfCustomMapSettings;
};

export type RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponse =
  RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses[keyof RustMapsApiFeaturesPublicApiMapsGetSettingsByIdResponses];

export type RustMapsApiFeaturesPublicApiMapsGetUrlData = {
  body?: never;
  path?: never;
  query: {
    url: string | null;
  };
  url: "/v4/maps/url";
};

export type RustMapsApiFeaturesPublicApiMapsGetUrlErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map not found
   */
  404: unknown;
  /**
   * Map has not finished generating
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsGetUrlResponses = {
  /**
   * Returns map data
   */
  200: ServiceResponseOfMapApidto;
};

export type RustMapsApiFeaturesPublicApiMapsGetUrlResponse =
  RustMapsApiFeaturesPublicApiMapsGetUrlResponses[keyof RustMapsApiFeaturesPublicApiMapsGetUrlResponses];

export type RustMapsApiFeaturesPublicApiMapsUploadData = {
  body: MapUploadNormalDto;
  path?: never;
  query?: never;
  url: "/v4/maps/upload";
};

export type RustMapsApiFeaturesPublicApiMapsUploadErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiMapsUploadResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfUploadedMapDto;
  /**
   * Created
   */
  201: ServiceResponseOfUploadedMapDto;
};

export type RustMapsApiFeaturesPublicApiMapsUploadResponse =
  RustMapsApiFeaturesPublicApiMapsUploadResponses[keyof RustMapsApiFeaturesPublicApiMapsUploadResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v4/maps/custom";
};

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfCustomMapSettings;
};

export type RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponse =
  RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsDefaultConfigResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsCreateData = {
  body: CreateApiCustomMapRequestDto;
  headers?: {
    "x-org-id"?: string | null;
  };
  path?: never;
  query?: never;
  url: "/v4/maps/custom";
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map already exists, but is not ready yet
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateResponses = {
  /**
   * Map already exists
   */
  200: unknown;
  /**
   * Map generation request successfully
   */
  201: ServiceResponseOfMapStatusDto;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateResponse =
  RustMapsApiFeaturesPublicApiCustomMapsCreateResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsCreateResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigData = {
  body: CreateApiCustomMapRequestFromConfigDto;
  headers?: {
    "x-org-id"?: string | null;
  };
  path?: never;
  query?: never;
  url: "/v4/maps/custom/saved-config";
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
  /**
   * Map already exists, but is not ready yet
   */
  409: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses = {
  /**
   * Map already exists
   */
  200: unknown;
  /**
   * Map generation request successfully
   */
  201: ServiceResponseOfMapStatusDto;
};

export type RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponse =
  RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsCreateFromConfigResponses];

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/v4/maps/custom/saved-configs";
};

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Forbidden
   */
  403: unknown;
};

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses = {
  /**
   * Success
   */
  200: ServiceResponseOfListOfCustomMapSettingsDto;
};

export type RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponse =
  RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses[keyof RustMapsApiFeaturesPublicApiCustomMapsGetConfigsResponses];
